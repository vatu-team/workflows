# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

on:
  workflow_call:

    inputs:

      runs-on:
        description: "Runner to be used by the parent workflow."
        required: false
        type: string
        default: 'ubuntu-latest'

      branch:
        type: string
        description: "Choose the branch to run this test against."
        default: 'main'

      php-version:
        description: "Version(s) of PHP to test against. Eg, `['8.2','8.3']`"
        required: false
        type: string
        default: "['8.0','8.1','8.2','8.3']"

jobs:

  php-compatibility:
    runs-on: ${{ inputs.runs-on }}
    env:
      COMPOSER_ALLOW_SUPERUSER: "1" # https://getcomposer.org/doc/03-cli.md#composer-allow-superuser

    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        php-version: ${{ fromJson(inputs.php-version) }}

    name: "PHP ${{ matrix.php-version }}"
    timeout-minutes: 15

    steps:

      - name: "Generate GitHub token from GitHub App (Bot)"
        uses: 'tibdex/github-app-token@v2.1.0'
        id: 'generate_token'
        with:
          app_id: ${{ secrets.VATU_BOT_ID }}
          private_key: ${{ secrets.VATU_BOT_KEY }}

      - name: "Checks out the repository."
        uses: "actions/checkout@v4.1.0"
        with:
          ref: ${{ inputs.branch }}

      - name: "Set up PHP ${{ matrix.php-version }}"
        uses: 'shivammathur/setup-php@2.26.0'
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          tools: composer
          ini-file: none
          ini-values: memory_limit=-1
        env:
          COMPOSER_TOKEN: ${{ secrets.github-token }}

      - name: 'Get Composer Cache Directory.'
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: 'Sets up Caching.'
        uses: 'actions/cache@v3.3.2'
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-composer-compat-${{ matrix.php-version }}-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-php-composer-compat-${{ matrix.php-version }}-${{ hashFiles('composer.json') }}

      - name: 'Add Vatu secrets for Composer dependencies.'
        env:
          composer_vatu_username: ${{ secrets.COMPOSER_VATU_USERNAME }}
          composer_vatu_key: ${{ secrets.COMPOSER_VATU_key }}
        if: "${{ env.composer_vatu_username != '' && env.composer_vatu_key != '' }}"
        run: |
          composer config http-basic.satispress.vatu.dev ${{ secrets.COMPOSER_VATU_USERNAME }} ${{ secrets.COMPOSER_VATU_KEY }}

      - name: "Build site."
        run: composer update --no-interaction --prefer-dist --no-scripts --no-dev --ignore-platform-req=php

      - name: 'Initialize Composer.'
        run: |
          mkdir -p tools/php-compat
          composer --working-dir=tools/php-compat init --name "vatu/php-compatibility-checker" --stability stable

      - name: 'Run PHP Lint Tests.'
        id: 'test-lint'
        uses: 'vatu-team/php-compatibility-checker/php-lint@trunk'
        with:
          php-version: ${{ matrix.php-version }}
        continue-on-error: true

      - name: 'Run PHP Compatibility Tests.'
        id: 'test-compat'
        uses: 'vatu-team/php-compatibility-checker/php-compatibility@trunk'
        with:
          php-version: ${{ matrix.php-version }}
        continue-on-error: true

      - name: 'Return status.'
        if: |
          always() &&
          steps.test-lint.outcome == 'failure' || steps.test-compat.outcome == 'failure'
        run: |
          exit 1
